## You can change the friendly name if you wish on line 7 below. The friendly name is how the device will show in HA 
## However the <name:> is how HA connects to the device eg. esp32-s3-box-3.local is the mDNS hostname for the device.
## Once added to HA changing the device name can lead to connection issues, between HA and the device.


config: !- $import('config.yaml')
substitutions: !? $_.config.substitutions

resources: !- $import('resources.yaml')
image: !? $_.resources.image
font: !? $_.resources.font
color: !? $_.resources.color

voice: !- $import('voice.yaml')
voice_assistant: !? $_.voice.voice_assistant
micro_wake_word: !? $_.voice.micro_wake_word
microphone: !? $_.voice.microphone

touch: !- $import('touch.yaml')
buttons: !- $_.touch.buttons
touch_pages: !- $_.touch.touch_pages
static_pages: !- $_.touch.static_pages
rendered_pages: !- $_.touch.rendered_pages
static_buttons: !- $_.touch.static_buttons

hass: !- $import('hass.yaml')

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  min_version: 2024.9.0
  platformio_options:
    board_build.flash_mode: dio
  on_boot:
    priority: 600
    then:
      - lambda: id(led).turn_on().set_brightness(id(s_default_brightness).state /100).perform();
      - display.page.show: loading_page
      - component.update: s3_box_lcd
      - script.execute: saver_enabled
      - lambda: id(time_remaining_0).publish_state ("0:00:00"); 
      - if:
          condition:
            switch.is_on: output_audio
          then:
            media_player.volume_set:    
              id: adf_media_player
              volume: 0 
  project:
    name: "BigBobbas.s3box"
    version: "2024.09.01"
esp32:
  board: esp32s3box
  flash_size: 16MB
  framework:
    type: esp-idf
    version: 4.4.8
    platform_version: 5.4.0
    sdkconfig_options:
      CONFIG_ESP32S3_DEFAULT_CPU_FREQ_240: "y"
      CONFIG_ESP32S3_DATA_CACHE_64KB: "y"
      CONFIG_ESP32S3_DATA_CACHE_LINE_64B: "y"
      CONFIG_AUDIO_BOARD_CUSTOM: "y"
      CONFIG_ESP32_S3_BOX_3_BOARD: "y"
    components:
      - name: esp32_s3_box_3_board
        source: github://jesserockz/esp32-s3-box-3-board@main
        refresh: 0s
   
psram:
  mode: octal
  speed: 80MHz
  
external_components:
  - source:
      type: git
      url: https://github.com/dimonb/esphome_audio
      ref: dev-next
    components: [ adf_pipeline, i2s_audio ]
    refresh: 0s  
    
api:
  encryption:
    key: !secret esphome_api_key
  on_client_connected:
    - lambda: |-
        id(api_connection) = true;
    - lambda: id(led).turn_on().set_brightness(id(s_default_brightness).state /100).perform();
    - component.update: s3_box_lcd
    - script.execute: saver_enabled
  on_client_disconnected:
    - lambda: |-
        id(api_connection) = false;

ota:
  - platform: esphome
    on_begin:
      - lambda: id(led).turn_on().set_brightness(1.0).set_transition_length(0).perform();
                id(led).loop();
      
      - display.page.show: ota_page
      - component.update: s3_box_lcd   
logger:
  hardware_uart: USB_SERIAL_JTAG
  logs:
    text_sensor: WARN
    component: ERROR
    auto_brightness: INFO


wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  ap:
    ssid: ${name}
    password: s3box123
  on_connect:
    - lambda: |-
        id(wifi_connection) = true;
    - display.page.show: idle_page
    - component.update: s3_box_lcd
  on_disconnect:
    - lambda: |-
        id(wifi_connection) = false;
captive_portal:      
time:
  - platform: homeassistant
    id: ha_time
    
f_update_state: !()
  interval: 10s
  then:
    - if:
        condition:
          - lambda: !? '"return { (id(" + $.name + "_connection) != true) };"'
        then:
          - if:
              condition:
                !? $.name+".connected":
              then:
                - lambda: !? '"id(" + $.name + "_connection) = true;"'
        else:
          - if:
              condition:
                not:
                  !? $.name+".connected":
              then:
                - lambda: !? '"id(" + $.name + "_connection) = true;"'
  

interval:
  - !? ($_.f_update_state)({ name => 'api' })  
  - !? ($_.f_update_state)({ name => 'wifi' })  
  - interval: 30s
    then:
      - component.update: s3_box_lcd

  - interval: 60s
    then:
      - lambda: |-
          if (id(brightness_auto).state) {
            auto now = id(ha_time).now();
            // Get sensor strings in ISO8601 (UTC)
            std::string dawn_str = id(sun_next_dawn).state;
            std::string dusk_str = id(sun_next_dusk).state;

            // Strip timezone: "YYYY-MM-DDTHH:MM:SS" -> "YYYY-MM-DD HH:MM:SS"
            if (dawn_str.size() >= 19) { dawn_str = dawn_str.substr(0, 19); dawn_str[10] = ' '; }
            if (dusk_str.size() >= 19) { dusk_str = dusk_str.substr(0, 19); dusk_str[10] = ' '; }
            ESP_LOGD("auto_brightness", "Dawn: %s, Dusk: %s", dawn_str.c_str(), dusk_str.c_str());

            ESPTime dawn_utc, dusk_utc;
            if (!ESPTime::strptime(dawn_str, dawn_utc) || !ESPTime::strptime(dusk_str, dusk_utc)) {
              ESP_LOGE("auto_brightness", "Failed to parse sun times");
              return;
            }

            ESP_LOGD("auto_brightness", "Dawn UTC: %s, Dusk UTC: %s", dawn_utc.strftime("%Y-%m-%d %H:%M:%S").c_str(), dusk_utc.strftime("%Y-%m-%d %H:%M:%S").c_str());

            dawn_utc.day_of_week = 1;  //workaround for bug in ESPTime, which require this field to be filled
            dusk_utc.day_of_week = 1;
            dawn_utc.day_of_year = 1;
            dusk_utc.day_of_year = 1;

            // Recalculate timestamps assuming parsed fields are in UTC
            dawn_utc.recalc_timestamp_utc(false);
            dusk_utc.recalc_timestamp_utc(false);
            ESP_LOGD("auto_brightness", "Dawn UTC timestamp: %ld, Dusk UTC timestamp: %ld", dawn_utc.timestamp, dusk_utc.timestamp);

            // Convert UTC to local time
            ESPTime dawn_local = ESPTime::from_epoch_local(dawn_utc.timestamp);
            ESPTime dusk_local = ESPTime::from_epoch_local(dusk_utc.timestamp);

            ESP_LOGD("auto_brightness", "Dawn local: %s, Dusk local: %s", dawn_local.strftime("%Y-%m-%d %H:%M:%S").c_str(), dusk_local.strftime("%Y-%m-%d %H:%M:%S").c_str());

            int new_brightness = 100;
            // Use local dawn/dusk times for comparison
            if (dusk_local.timestamp < dawn_local.timestamp) {
              new_brightness = 100;
            } else {
              new_brightness = (now.hour >= dusk_local.hour && now.hour < 20) ? 65 : 45;
            }

            if (new_brightness != static_cast<int>(id(s_default_brightness).state)) {
              ESP_LOGI("auto_brightness", "Updating brightness from %d to %d",
                      static_cast<int>(id(s_default_brightness).state), new_brightness);
              id(s_default_brightness).make_call().set_value(new_brightness).perform();
              id(led).turn_on().set_brightness(id(s_default_brightness).state /100).perform();
            }
          }

  

select:
  - platform: template
    entity_category: config
    name: Wake word engine location
    id: wake_word_engine_location
    optimistic: true
    restore_value: true
    options:
      - In Home Assistant
      - On device
    initial_option: In Home Assistant
    on_value:
      - if:
          condition:
            lambda: return x == "In Home Assistant";
          then:
            - micro_wake_word.stop
            - delay: 500ms
            - lambda: id(va).set_use_wake_word(true);
            - voice_assistant.start_continuous
            - text_sensor.template.publish:
                id: wakeword_location
                state: !lambda 'return "Home Assistant";'
            - component.update: s3_box_lcd
      - if:
          condition:
            lambda: return x == "On device";
          then:
            - text_sensor.template.publish:
                id: wakeword_location
                state: !lambda 'return "On Device";'
            - lambda: id(va).set_use_wake_word(false);
            - voice_assistant.stop
            - delay: 500ms
            - micro_wake_word.start
            - component.update: s3_box_lcd

  - platform: template
    entity_category: config
    name: Time Format
    id: time_format
    optimistic: true
    restore_value: true
    options:
      - 12 Hr
      - 24 Hr
    initial_option: 24 Hr
    on_value:
      then:
        - if:
            condition:
              lambda: return x == "24 Hr";
            then:
              - text_sensor.template.publish:
                  id: time_display_format
                  state: !lambda 'return "24 Hr";'
            else:
              - text_sensor.template.publish:
                    id: time_display_format
                    state: !lambda 'return "12 Hr";'
        - component.update: s3_box_lcd
                
script:           
  - id: set_volume
    then:
      - media_player.volume_set:
          volume: !lambda return 0.5 + id(speaker_volume) * 0.05 ;
          
  - id: saver_enabled
    then:
      - if:
          condition: 
            switch.is_on: s_saver 
          then:
            - lambda: id(led).turn_on().set_brightness(id(s_default_brightness).state /100).perform();
            - delay: !lambda return id(s_saver_delay).state * 1000;
            - lambda: id(led).turn_on().set_brightness(id(s_saver_brightness).state /100).perform();
            - display.page.show: saver_page
            - component.update: s3_box_lcd
      - if:
          condition:
            - switch.is_on: s_saver_mode            
          then:
            - delay: !lambda return id(s_saver_blank_delay).state * 1000;
            - light.turn_off: led
    mode: restart

  - id: saver_enabled_manual
    then:
      - if:
          condition: 
            - switch.is_on: s_saver 
          then:
            - lambda: id(led).turn_on().set_brightness(id(s_saver_brightness).state /100).perform();
            - display.page.show: saver_page
            - component.update: s3_box_lcd
      - if:
          condition:
            - switch.is_on: s_saver_mode            
          then:
            - delay: !lambda return id(s_saver_blank_delay).state * 1000;
            - light.turn_off: led
            - component.update: s3_box_lcd
    mode: restart 
 
  - id: timer_started
    then:      
      while:
        condition:
          switch.is_on: timer_ringing
        then:    
          - media_player.play_media:
              media_url: '${home_assistant_host}/local/sounds/timer_finished.mp3'
          - delay: 1s   
        
  - id: timer_started_external
    then:
      while:
        condition:
          switch.is_on: timer_ringing
        then:
          - homeassistant.service:
              service: media_player.play_media
              data:
                entity_id: media_player.${external_media_player}
                media_content_id: '${home_assistant_host}/local/sounds/timer_finished.mp3'
                media_content_type: music
          - delay: 1700ms
        
        
  - id: timer_ending
    then:
      - wait_until: 
            - lambda: return (id(time_remaining_0).state == "0:00:10");
      - script.execute: saver_enabled
      - display.page.show: time_remaining_page
      - component.update: s3_box_lcd         


  - id: increment_digit_1
    then:
      - lambda: |-
          id(current_pin) += "1"; 
          ESP_LOGD("increment_digit_1", "Current PIN: %s", id(current_pin).c_str());

  - id: increment_digit_2
    then:
      - lambda: |-
          id(current_pin) += "2";  
          ESP_LOGD("increment_digit_2", "Current PIN: %s", id(current_pin).c_str());


  - id: increment_digit_3
    then:
      - lambda: |-
          id(current_pin) += "3";  
          ESP_LOGD("increment_digit_3", "Current PIN: %s", id(current_pin).c_str());


  - id: increment_digit_4
    then:
      - lambda: |-
          id(current_pin) += "4";  
          ESP_LOGD("increment_digit_4", "Current PIN: %s", id(current_pin).c_str());


  - id: increment_digit_5
    then:
      - lambda: |-
          id(current_pin) += "5";  
          ESP_LOGD("increment_digit_5", "Current PIN: %s", id(current_pin).c_str());


  - id: increment_digit_6
    then:
      - lambda: |-
          id(current_pin) += "6";  
          ESP_LOGD("increment_digit_6", "Current PIN: %s", id(current_pin).c_str());


  - id: increment_digit_7
    then:
      - lambda: |-
          id(current_pin) += "7";  
          ESP_LOGD("increment_digit_7", "Current PIN: %s", id(current_pin).c_str());


  - id: increment_digit_8
    then:
      - lambda: |-
          id(current_pin) += "8";  
          ESP_LOGD("increment_digit_8", "Current PIN: %s", id(current_pin).c_str());

  - id: increment_digit_9
    then:
      - lambda: |-
          id(current_pin) += "9";  
          ESP_LOGD("increment_digit_9", "Current PIN: %s", id(current_pin).c_str());

  - id: increment_digit_0
    then:
      - lambda: |-
          id(current_pin) += "0";  
          ESP_LOGD("increment_digit_0", "Current PIN: %s", id(current_pin).c_str());       
globals:
  - id: wifi_connection
    type: bool
    restore_value: no
    initial_value: "false"
  - id: api_connection
    type: bool
    restore_value: no
    initial_value: "false" 
  - id: mute_value
    type: bool
    restore_value: no
    initial_value: "false" 
  - id: speaker_volume
    type: int
    restore_value: no
    initial_value: '5'
  - id: media_state
    type: bool
    restore_value: no
    initial_value: "false"
  - id: global_first_active_timer
    type: voice_assistant::Timer
    restore_value: false
  - id: global_is_timer_active
    type: bool
    restore_value: false
  - id: global_first_timer
    type: voice_assistant::Timer
    restore_value: false
  - id: global_is_timer
    type: bool
    restore_value: false    
  - id: current_pin
    type: std::string
    initial_value: "" 

number:
  - id: s_saver_delay
    platform: template
    name: "Scr/save delay"
    icon: 'mdi:sleep'
    entity_category: config
    unit_of_measurement: 'secs'
    optimistic: true
    restore_value: true
    initial_value: 30
    step: 5
    min_value: 10
    max_value: 999999
    on_value:
      - component.update: s3_box_lcd
      - component.update: s_saver_delay
      - script.execute: saver_enabled
      
  - id: s_saver_blank_delay
    platform: template
    name: "Scr/off delay"
    icon: 'mdi:monitor-off'
    entity_category: config
    unit_of_measurement: 'secs'
    optimistic: true
    restore_value: true
    initial_value: 30
    step: 5
    min_value: 10
    max_value: 999999
    on_value:
      - component.update: s_saver_blank_delay
      - script.execute: saver_enabled
      - component.update: s3_box_lcd
      
  - id: s_saver_brightness
    platform: template
    name: "Scr/save Brightness"
    icon: 'mdi:sleep'
    entity_category: config
    unit_of_measurement: '%'
    optimistic: true
    restore_value: true
    initial_value: 30
    step: 5
    min_value: 20
    max_value: 100
    on_value:
      - component.update: s_saver_brightness
      - script.execute: saver_enabled
      - component.update: s3_box_lcd
      
  - id: s_default_brightness
    platform: template
    name: "Default Brightness"
    icon: 'mdi:monitor'
    entity_category: config
    unit_of_measurement: '%'
    optimistic: true
    restore_value: true
    initial_value: 100
    step: 5
    min_value: 20
    max_value: 100
    on_value:
      - component.update: s_default_brightness
      - script.execute: saver_enabled
      - component.update: s3_box_lcd
button:
  - platform: restart
    id: reboot
    name: "Reboot"
    entity_category: diagnostic
    
switch:
  - platform: template
    name: Display conversation
    id: display_conversation
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    entity_category: config
    icon: 'mdi:chat'

  - platform: template
    name: Output audio externally
    id: output_audio
    icon: 'mdi:volume-off'
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    entity_category: config  
    on_turn_on: 
      media_player.volume_set:    
        id: adf_media_player
        volume: 0    
    on_turn_off: 
      media_player.volume_set:    
        id: adf_media_player
        volume: 1.0 
      
  - platform: template
    name: Mute
    id: mute_switch
    icon: "mdi:microphone-off"
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    entity_category: config
    on_turn_on:
      then:
        - voice_assistant.stop
        - micro_wake_word.stop
    on_turn_off:
      - if:
          condition:
            not:
              - voice_assistant.is_running
          then:
            - if:
                condition:
                  lambda: return id(wake_word_engine_location).state == "In Home Assistant";
                then:
                  - lambda: id(va).set_use_wake_word(true);
                  - delay: 50ms
                  - voice_assistant.start_continuous
            - if:
                condition:
                  lambda: return id(wake_word_engine_location).state == "On device";
                then:
                  - lambda: id(va).set_use_wake_word(false);
                  - micro_wake_word.start
            - component.update: s3_box_lcd

  - platform: template
    id: media_mute
    optimistic: true
    on_turn_on:   
      media_player.volume_set:    
        id: adf_media_player
        volume: 0
    on_turn_off:
      media_player.volume_set: 
        id: adf_media_player
        volume: 1.0       
        
  - platform: template
    id: s_saver
    name: Scr/save enable
    icon: mdi:sleep
    optimistic: true    
    restore_mode: RESTORE_DEFAULT_OFF
    entity_category: config
     
  - platform: template
    id: s_saver_mode
    name: Scr/off enable
    icon: 'mdi:monitor-off'
    optimistic: true    
    restore_mode: RESTORE_DEFAULT_OFF
    entity_category: config
     
  - platform: template
    id: timer_ringing
    optimistic: true
    internal: true
    restore_mode: ALWAYS_OFF
    on_turn_on:
      - lambda: id(led).turn_on().set_brightness(1.0).perform();
      - delay: 15min
      - switch.turn_off: timer_ringing 
    on_turn_off:
      - media_player.stop
      
  - platform: template
    id: wake_sound
    name: Play wake sound
    icon: mdi:music
    entity_category: config
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    
  - platform: template
    id: mute_response_switch
    name: Mute Responses
    icon: mdi:chat-sleep
    entity_category: config
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    
  - platform: template
    id: brightness_auto
    name: Brightness Auto
    icon: mdi:brightness-auto
    entity_category: config
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF

  - platform: template
    id: ext_media_mute
    icon: 'mdi:volume-off'
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    entity_category: config
    on_turn_on:
      then:
        - homeassistant.service:
            service: media_player.volume_mute
            data:
              entity_id: media_player.${external_media_player}
    on_turn_off:
        - homeassistant.service:
            service: media_player.volume_mute
            data:
              entity_id: media_player.${external_media_player}    
 
output:
  - platform: ledc
    pin: GPIO47
    id: backlight_output

light:
  - platform: monochromatic
    id: led
    name: LCD Backlight
    entity_category: config
    output: backlight_output
    restore_mode: ALWAYS_ON
    default_transition_length: 50ms
    
sensor:         
  - platform: uptime
    id: up_sens
    on_value:
      - lambda: |-
          int seconds = id(up_sens).state;
          int days = seconds / 86400;
          int hours = seconds / 3600;
          int minutes = (seconds % 3600) / 60;
          seconds %= 60;
          id(up_sens_text).publish_state(str_sprintf("%03d:%02d:%02d:%02d", days, hours, minutes, seconds)); 
    update_interval: 30s

  - platform: wifi_signal
    name: "WiFi db"
    id: wifi_signal_db
    update_interval: 30s
    
  - platform: copy 
    source_id: wifi_signal_db
    name: "WiFi Signal"
    id: wifi_percent
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: "diagnostic"
    device_class: ""   
    
  - !for $_.hass.sensor: !()
    - !? $

text_sensor:
  - id: text_request
    platform: template
    on_value:
      lambda: |-
        if(id(text_request).state.length()>32) {
          std::string name = id(text_request).state.c_str();
          std::string truncated = esphome::str_truncate(name.c_str(),31);
          id(text_request).state = (truncated+"...").c_str();
        }

  - id: text_response
    platform: template
    on_value:
      lambda: |-
        if(id(text_response).state.length()>32) {
          std::string name = id(text_response).state.c_str();
          std::string truncated = esphome::str_truncate(name.c_str(),31);
          id(text_response).state = (truncated+"...").c_str();
        }
  - platform: wifi_info
    ip_address:
      name: IP Address
      id: ip_addr
      entity_category: "diagnostic"
    ssid:
      id: connected_ssid
      name: SSID
      entity_category: "diagnostic"
    bssid:
      id: connected_bssid
      name: BSSID
      entity_category: "diagnostic"
    mac_address:
      id: device_mac

  - platform: template
    id: up_sens_text
    name: Device uptime
    entity_category: "diagnostic"
    icon: mdi:clock

  - platform: template
    id: wakeword_location

  - platform: template
    id: time_remaining_0
    name: Timer 
    icon: mdi:clock
               
  - platform: template
    id: time_remaining_1

  - platform: template
    id: time_display_format
    update_interval: never

  - platform: homeassistant
    entity_id: media_player.${external_media_player}
    id: ha_media_status
    on_value:
      component.update: s3_box_lcd

  - platform: homeassistant
    entity_id: media_player.${external_media_player}
    id: ha_media_title
    attribute: media_content_id
    on_value:
      component.update: s3_box_lcd 

  - platform: homeassistant
    name: "Alarm Status"
    entity_id: alarm_control_panel.alarmo
    id: alarm_status  
    on_value:
      - component.update: s3_box_lcd    

  - !for $_.hass.text_sensor: !()
    - !? $
      
i2s_audio:
  - id: i2s_shared
    i2s_lrclk_pin:
      number: GPIO45
      ignore_strapping_warning: true
    i2s_bclk_pin: GPIO17
    i2s_mclk_pin: GPIO2
    access_mode: duplex

adf_pipeline:
  - platform: i2s_audio
    type: audio_out
    id: adf_i2s_out
    i2s_audio_id: i2s_shared
    i2s_dout_pin: GPIO15
    adf_alc: false
    dac:
      i2c_id: bus_a
      model: es8311
      address: 0x18
      enable_pin:
        number: GPIO46
        ignore_strapping_warning: true
    sample_rate: 16000
    bits_per_sample: 16bit
    fixed_settings: true

  - platform: i2s_audio
    type: audio_in
    id: adf_i2s_in
    i2s_audio_id: i2s_shared
    i2s_din_pin: GPIO16
    pdm: false
    adc:
      i2c_id: bus_a
      model: es7210
      address: 0x40
    sample_rate: 16000
    bits_per_sample: 16bit
    fixed_settings: true

media_player:
  - platform: adf_pipeline
    id: adf_media_player
    name: s3-box_media_player
    internal: false
    keep_pipeline_alive: true
    announcement_audio:
      sample_rate: ${tts_voice_speed}
      bits_per_sample: 16
      num_channels: 1
    pipeline:
      - self
      - resampler
      - adf_i2s_out
    on_play: 
      - lambda: |-
          id(media_state) = true;
      - component.update: s3_box_lcd
    on_idle:
      - lambda: |-
          id(media_state) = false;
      - component.update: s3_box_lcd


spi:
  clk_pin: 7
  mosi_pin: 6


display:
  - platform: ili9xxx
    id: s3_box_lcd
    model: S3BOX
    data_rate: 40MHz
    cs_pin: 5
    dc_pin: 4
    reset_pin:
      number: 48
      inverted: true
    update_interval: never
    invert_colors: false
    ##################################################################################################
    ################ The below section defines, what is displayed on the screen,        ##############
    ################ the colours and mdi icons are defined above under font: and Color: ##############
    ################ they are then referenced in the config below.                      ##############
    ##################################################################################################
    pages: !? $_.static_pages.concat($_.rendered_pages[0])


i2c:
  - id: bus_a
    sda: GPIO08
    scl: GPIO18
    scan: false
    sda_pullup_enabled: true
    scl_pullup_enabled: true
    frequency: 100kHz

  - sda: GPIO41
    scl: GPIO40
    scan: false
    sda_pullup_enabled: true
    scl_pullup_enabled: true
    frequency: 50kHz
    id: bus_b


touchscreen:
  - platform: gt911
    i2c_id: bus_a
    id: gt911_touchscreen
    interrupt_pin:
      number: GPIO3
      ignore_strapping_warning: true
    on_touch:
      - lambda: |-
          id(led).turn_on().set_brightness(id(s_default_brightness).state /100).perform();
          ESP_LOGD("gt911_touchscreen", "Touch at x=%i, y=%i", touch.x, touch.y);
    on_release:
      - script.execute: saver_enabled 
   


binary_sensor:
###### top left hand physical button #######
  - platform: gpio
    id: top_left_button
    pin:
      number: GPIO0
      mode: INPUT_PULLUP
      inverted: true
      ignore_strapping_warning: true
    on_press:
      - if:
          condition:
            - display.is_displaying_page: saver_page
          then:
            - lambda: id(led).turn_on().set_brightness(id(s_default_brightness).state /100).perform();
            - display.page.show: idle_page
            - script.execute: saver_enabled
            - component.update: s3_box_lcd
          else:
            if:
              condition:
                - display.is_displaying_page: idle_page
              then:
                - script.execute: saver_enabled
                - display.page.show: saver_page
                - component.update: s3_box_lcd
            
# #######     red circle home button   #####################
  - platform: gt911
    id: home_button
    index: 0
    on_press:
      if:
        condition:
          - display.is_displaying_page: idle_page  
        then:
          - script.execute: saver_enabled
        else: 
          - lambda: id(led).turn_on().set_brightness(id(s_default_brightness).state /100).perform();
          - display.page.show: idle_page
          - component.update: s3_box_lcd

  - !for $_.hass.binary_sensor: !()
    - !? $

  - !for $_.touch.static_buttons: !()
    - !? $
                  
  - !for .buttons.where($.containsKey("x")).where(let(id => $.id) -> $_.touch_pages.where($.buttons.any($ = $id)).len()): !()
      - platform: touchscreen
        pages:
          !? let(id => $.id) -> $_.touch_pages.where($.buttons.any($ = $id)).id
        id: !? $.id
        internal: true
        x_min: !? $.x
        x_max: !? $.x + $.w
        y_min: !? $.y
        y_max: !? $.y + $.h
        !if $.containsKey("on_click"):
          on_click:
            min_length: 10ms
            max_length: 500ms
            then: 
              !? $.on_click
        !if $.containsKey("on_press"):
          on_press:
            then:
              !? $.on_press
        !if $.containsKey("on_release"):
          on_release:
            then:
              !? $.on_release


            
