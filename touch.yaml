resources: !- $import('resources.yaml')
icon_glyphs: !- $_.resources.icon_glyphs


draw_icon: !()
  let(btn_id => $.id) -> let(btn => $_.buttons.where($.id = $btn_id).first()) -> 
  "        it.printf(" + str($btn.x) + ", " + str($btn.y) + ", id(" + $btn.font + "), " + $.color + ", \"" + $.icon + "\");"

buttons: !- 
  - id: status_bar_title
    draw:
      - "auto x = 150;"
      - "if(id(temperature_bedroom).has_state()) {"
      - "   it.printf(x, 10, id(my_font28), blue, COLOR_OFF, TextAlign::LEFT, \"%.1f°\", id(temperature_bedroom).state);"
      - "}"
      - "if(id(co2_bedroom).has_state()) {"
      - "   auto co2_color = id(co2_bedroom).state > 1000 ? (id(co2_bedroom).state > 1500 ? red : amber) : green;"
      - "   it.printf(x + 77, 10, id(my_font28), co2_color, COLOR_OFF, TextAlign::LEFT, \"%4.0f\", id(co2_bedroom).state);"
      - !? '"   it.printf(x + 137, 13, id(icon_font_25), co2_color,\"" + $_.icon_glyphs.co2 + "\");"'
      - "}"

  - id: status_bar_mute_switch
    x: 80
    y: 5
    w: 35
    h: 35
    font: icon_font_35
    on_click:
      - switch.toggle: mute_switch
      - component.update: s3_box_lcd
    draw:
      - "if(id(mute_switch).state) {"
      - !? ($_.draw_icon)({id=>"status_bar_mute_switch", color=>"red", icon=>$_.icon_glyphs.mic_off})
      - "} else {"
      - !? ($_.draw_icon)({id=>"status_bar_mute_switch", color=>"lime", icon=>$_.icon_glyphs.mic_on})
      - "}"

  - id: status_bar_api_connection
    x: 10
    y: 5
    w: 35
    h: 35
    font: icon_font_35
    on_click:
      - display.page.show: settings_page
      - component.update: s3_box_lcd
    draw:
      - "if(id(api_connection) == true) {"
      - !? ($_.draw_icon)({id=>"status_bar_api_connection", color=>"blue", icon=>$_.icon_glyphs.api_connected})
      - "} else {"
      - !? ($_.draw_icon)({id=>"status_bar_api_connection", color=>"red", icon=>$_.icon_glyphs.api_disconnected})
      - "}"

  - id: status_bar_wifi_connection
    x: 45
    y: 5
    w: 35
    h: 35
    font: icon_font_35
    on_click:
      - display.page.show: wifi_page
      - component.update: s3_box_lcd
    draw:
      - "if(id(wifi_connection) == true) {"
      - !? ($_.draw_icon)({id=>"status_bar_wifi_connection", color=>"lime", icon=>$_.icon_glyphs.wifi_connected})
      - "} else {"
      - !? ($_.draw_icon)({id=>"status_bar_wifi_connection", color=>"red", icon=>$_.icon_glyphs.wifi_disconnected})
      - "}"

  - id: status_bar_settings_button
    x: 280
    y: 5
    w: 35
    h: 35
    font: icon_font_35
    on_click:
      - display.page.show: settings_page
      - component.update: s3_box_lcd
    draw:
      - !? ($_.draw_icon)({id=>"status_bar_settings_button", color=>"lime", icon=>$_.icon_glyphs.settings})

  - id: current_time
    draw:
      - "const char *days[] {\"${sunday}\",\"${monday}\",\"${tuesday}\",\"${wednesday}\",\"${thursday}\",\"${friday}\",\"${saturday}\"};"
      - "const char *months[] {\"${jan}\",\"${feb}\",\"${mar}\",\"${apr}\",\"${may}\",\"${jun}\",\"${jul}\",\"${aug}\",\"${sept}\",\"${oct}\",\"${nov}\",\"${dec}\"};"
      - "it.printf(160, 130, id(my_font22), light_blue, TextAlign::CENTER, \"%s %d %s\", days[id(ha_time).now().day_of_week - 1], id(ha_time).now().day_of_month, months[id(ha_time).now().month - 1]);"
      - "if(id(time_display_format).state != \"12 Hr\") {"
      - "        it.strftime(160, 88, id(my_font82), TextAlign::CENTER, \"%H:%M\", id(ha_time).now());"
      - "} else {"
      - "        it.strftime(160, 88, id(my_font72), TextAlign::CENTER, \"%l:%M%p\", id(ha_time).now());"
      - "}"

  - id: temp_sensor_button
    x: 20
    y: 75
    w: 80
    h: 80
    font: icon_font_75
    on_click:
      - display.page.show: climate_page
      - component.update: s3_box_lcd
    draw:
      - !? ($_.draw_icon)({id=>"temp_sensor_button", color=>"blue", icon=>$_.icon_glyphs.temp_sensor})
   
  - id: light_on_button
    x: 120
    y: 75
    w: 80
    h: 80
    font: icon_font_75
    on_click:
      - display.page.show: lights_page
      - component.update: s3_box_lcd
    draw:
      - !? ($_.draw_icon)({id=>"light_on_button", color=>"yellow", icon=>$_.icon_glyphs.light_on})

  - id: light_control_button
    x: 120
    y: 155
    w: 80
    h: 80
    font: icon_font_75
    on_click:
      - homeassistant.service:
          service: light.toggle
          data:
            entity_id: light.pw_switch02
      - delay: 200ms
      - component.update: s3_box_lcd
    draw:
      - "if (id(bedroom_light).state){"
      - !? ($_.draw_icon)({id=>"light_control_button", color=>"yellow", icon=>$_.icon_glyphs.light_on})
      - "} else {"
      - !? ($_.draw_icon)({id=>"light_control_button", color=>"blue", icon=>$_.icon_glyphs.light_on})
      - "}"

  - id: weather_current_condition
    draw:
      - "if(id(openweathermap_condition).has_state()) {"
      - !? '" auto glyph = \"" + $_.icon_glyphs.weather_sunny + "\";"'
      - "  auto state = id(openweathermap_condition).state;"
      - "  if(state == \"clear-night\") {"
      - !? '"    glyph = \"" + $_.icon_glyphs.weather_night + "\";"'
      - "  } else if(state == \"cloudy\") {"
      - !? '"    glyph = \"" + $_.icon_glyphs.weather_cloudy + "\";"'
      - "  } else if(state == \"exceptional\") {"
      - !? '"    glyph = \"" + $_.icon_glyphs.weather_sunny + "\";"'
      - "  } else if(state == \"fog\") {"
      - !? '"    glyph = \"" + $_.icon_glyphs.weather_fog + "\";"'
      - "  } else if(state == \"hail\") {"
      - !? '"    glyph = \"" + $_.icon_glyphs.weather_hail + "\";"'
      - "  } else if(state == \"lightning-rainy\") {"
      - !? '"    glyph = \"" + $_.icon_glyphs.weather_lightning + "\";"'
      - "  } else if(state == \"lightning\") {"
      - !? '"    glyph = \"" + $_.icon_glyphs.weather_lightning + "\";"'
      - "  } else if(state == \"partlycloudy\") {"
      - !? '"    glyph = \"" + $_.icon_glyphs.weather_partly_cloudy + "\";"'
      - "  } else if(state == \"pouring\") {"
      - !? '"    glyph = \"" + $_.icon_glyphs.weather_pouring + "\";"'
      - "  } else if(state == \"rainy\") {"
      - !? '"    glyph = \"" + $_.icon_glyphs.weather_rainy + "\";"'
      - "  } else if(state == \"snowy-rainy\") {"
      - !? '"    glyph = \"" + $_.icon_glyphs.weather_snowy + "\";"'
      - "  } else if(state == \"snowy\") {"
      - !? '"    glyph = \"" + $_.icon_glyphs.weather_snowy + "\";"'
      - "  } else if(state == \"sunny\") {"
      - !? '"    glyph = \"" + $_.icon_glyphs.weather_sunny + "\";"'
      - "  } else if(state == \"windy-variant\") {"
      - !? '"    glyph = \"" + $_.icon_glyphs.weather_windy_variant + "\";"'
      - "  } else if(state == \"windy\") {"
      - !? '"    glyph = \"" + $_.icon_glyphs.weather_windy + "\";"'
      - "  } else {"
      - !? '"    glyph = \"" + $_.icon_glyphs.weather_sunny + "\";"'
      - "  }"
      - "  it.printf(216, 156, id(icon_font_60), id(white), glyph);"
      - "  it.printf(271, 206, id(my_font22), id(white), COLOR_OFF, TextAlign::LEFT, \"%.0f°\", id(openweathermap_temperature).state);"
      - "}"

  - id: fan_button
    x: 220
    y: 75
    w: 80
    h: 80
    font: icon_font_75
    on_click:
      - display.page.show: template_page
      - component.update: s3_box_lcd
    draw:
      - !? ($_.draw_icon)({id=>"fan_button", color=>"purple", icon=>$_.icon_glyphs.fan})

  - id: music_button
    x: 20
    y: 155
    w: 80
    h: 80
    font: icon_font_75
    on_click:
      - if:
          condition:
            switch.is_off: output_audio
          then:
            - display.page.show: media_page
            - component.update: s3_box_lcd
          else:
            - display.page.show: ext_media_page
            - component.update: s3_box_lcd
    draw:
      - !? ($_.draw_icon)({id=>"music_button", color=>"red", icon=>$_.icon_glyphs.music})

  - id: scene_button
    x: 120
    y: 155
    w: 80
    h: 80
    font: icon_font_75
    on_click:
      - display.page.show: scenes_page
      - component.update: s3_box_lcd
    draw:
      - !? ($_.draw_icon)({id=>"scene_button", color=>"blue", icon=>$_.icon_glyphs.scene})

  - id: voice_set
    x: 5
    y: 100
    w: 100
    h: 65
    on_click:
      - display.page.show: ww_set_page
      - component.update: s3_box_lcd
    draw:
      - "it.printf(20, 160, id(icon_font_35), light_blue,\"\\U000F08D6\");"        
      - "it.printf(15, 125, id(my_font22), light_blue,\"Voice\");"

  - id: ss_set
    x: 110
    y: 100
    w: 100
    h: 65
    on_click:
      - display.page.show: ss_set_page
      - component.update: s3_box_lcd
    draw:
      - "it.printf(143, 80, id(icon_font_35), light_blue,\"\\U000F0502\");"
      - "it.printf(130, 125, id(my_font22), light_blue,\"Saver\");"

  - id: info_set
    internal: true
    x: 215
    y: 100
    w: 100
    h: 65
    on_click:
      - display.page.show: info_page
      - component.update: s3_box_lcd
    draw:
      - "it.printf(255, 80, id(icon_font_35), light_blue, \"\\U000F1C6F\");"
      - "it.printf(245, 125, id(my_font22), light_blue, \"Info\");"
           
  - id: device_set
    internal: true
    x: 5
    y: 175
    w: 100
    h: 65
    on_click:
      - display.page.show: device_set_page
      - component.update: s3_box_lcd
    draw:
      - "it.printf(20, 80, id(icon_font_35), light_blue,\"\\U000F036F\");"
      - "it.printf(15, 205, id(my_font22), light_blue,\"Device\");"

  - id: voice_test 
    internal: true
    x: 215
    y: 175
    w: 100
    h: 65
    on_press:
      - switch.turn_on: mute_switch
      - lambda: id(va).set_use_wake_word(false);
      - delay: 100ms
      - voice_assistant.start 
      - wait_until:
          not:
            - voice_assistant.is_running
      - voice_assistant.stop
    on_release:
      - switch.turn_off: mute_switch    
      - component.update: s3_box_lcd
    draw:
      - "it.printf(255, 160, id(icon_font_35), light_blue, \"\\U000F05CB\");"
      - "it.printf(245, 205, id(my_font22), light_blue, \"Test\");" 

  - id: wifi_info
    draw:
      - "it.printf(160, 75, id(my_font22), light_blue, TextAlign::CENTER, \"ssid\");"
      - "it.printf(160, 95, id(my_font18), yellow, TextAlign::CENTER, \"%s\", id(connected_ssid).state.c_str());"
      - "it.printf(160, 125, id(my_font22), light_blue, TextAlign::CENTER, \"bssid\");"
      - "it.printf(160, 145, id(my_font18), yellow, TextAlign::CENTER, \"%s\", id(connected_bssid).state.c_str());"
      - "it.printf(160, 175, id(my_font22), light_blue, TextAlign::CENTER, \"Device MAC\");"
      - "it.printf(160, 195, id(my_font18), yellow, TextAlign::CENTER, \"%s\", id(device_mac).state.c_str());"
      - "it.printf(38, 210, id(my_font22), light_blue, TextAlign::LEFT, \"Signal Strength\");"
      - "it.printf(283, 210, id(my_font22), yellow, TextAlign::RIGHT, \"%4.f%%\", id(wifi_percent).state);"

  - id: device_info
    draw:
      - "it.printf(160, 75, id(my_font22), light_blue, TextAlign::CENTER, \"IP Address\");"
      - "it.printf(160, 95, id(my_font18), yellow, TextAlign::CENTER, \"%s\", id(ip_addr).state.c_str());"
      - "it.printf(160, 125, id(my_font22), light_blue, TextAlign::CENTER, \"Host Name\");"
      - "it.printf(160, 145, id(my_font18), yellow, TextAlign::CENTER, \"${name}.local\");"
      - "it.printf(160, 175, id(my_font22), light_blue, TextAlign::CENTER, \"Device Uptime DDD:H:M:S\");"
      - "it.printf(160, 195, id(my_font18), yellow, TextAlign::CENTER, \"%s\", id(up_sens_text).state.c_str());"

  - id: settings_info
    draw:
      - "it.printf(160, 60, id(my_font22), light_blue, TextAlign::CENTER, \"settings\");" # settings text
      - "it.image((it.get_width() / 2), 195, id(logo_img), ImageAlign::CENTER);"  # logo image

  - id: media_page 
    draw:
      - "if(id(media_state) == true) {"
      - "  it.printf(160, 80, id(my_font22), lime, TextAlign::CENTER, \"Playing\");"
      - "} else {"
      - "  it.printf(160, 80, id(my_font22), light_blue, TextAlign::CENTER, \"Nothing Playing\");"
      - "}"
      - "it.printf(20, 100, id(icon_font_75), blue,\"\\U000F075E\");"
      - "it.printf(120, 100, id(icon_font_75), blue,\"\\U000F040E\");"
      - "it.printf(220, 100, id(icon_font_75), blue,\"\\U000F075D\");"
      - "if(id(media_mute).state) {"
      - "  it.printf(120, 165, id(icon_font_75), red,\"\\U000F0581\");"
      - "} else {"
      - "  it.printf(120, 165, id(icon_font_75), lime,\"\\U000F057E\");"
      - "}"

  - id: ext_media_page
    draw:
      - "it.printf(160, 80, id(my_font22), lime, TextAlign::CENTER, id(ha_media_status).state.c_str());"
      - "it.printf(20, 100, id(icon_font_75), blue,\"\\U000F04AE\");"
      - "it.printf(120, 100, id(icon_font_75), blue,\"\\U000F040E\");"
      - "it.printf(220, 100, id(icon_font_75), blue,\"\\U000F04AD\");"
      - "if(id(ext_media_mute).state) {"          
      - "  it.printf(120, 165, id(icon_font_75), red,\"\\U000F0581\");"
      - "} else {"        
      - "  it.printf(120, 165, id(icon_font_75), lime,\"\\U000F057E\");"
      - "}"
      - "it.printf(20, 165, id(icon_font_75), blue,\"\\U000F075E\");"
      - "it.printf(220, 165, id(icon_font_75), blue,\"\\U000F075D\");"

  - id: device_set_back
    x: 5
    y: 175
    w: 100
    h: 65
    on_click:
      - display.page.show: settings_page
      - component.update: s3_box_lcd
    draw:
      - !? '"it.printf(5, 190, id(icon_font_35), light_blue, \"" + $_.icon_glyphs.left + "\");"'

  - id: s_default_bright_down
    x: 280
    y: 128
    w: 40
    h: 40
    on_press:
      - lambda: |-
          int default_bright = id(s_default_brightness).state - 5;
          if (default_bright < 1) {
            default_bright = 1;
          }
          auto call = id(s_default_brightness).make_call();
          call.set_value(default_bright);
          call.perform();
      - component.update: s3_box_lcd
    draw:
      - !? '"it.printf(315, 128, id(icon_font_35), lime, TextAlign::RIGHT, \"" + $_.icon_glyphs.down + "\");"'    
        
  - id: s_default_bright_up
    x: 170
    y: 128
    w: 40
    h: 40
    on_press:
      - lambda: |-
            int default_bright = id(s_default_brightness).state + 5;
            auto call = id(s_default_brightness).make_call();
            call.set_value(default_bright);
            call.perform();
      - component.update: s3_box_lcd
    draw:
      - "it.printf(15, 135, id(my_font22), light_blue, \"Brightness\");"     #common for both up and down
      - "it.printf(245, 135, id(my_font22), light_blue, TextAlign::CENTER_HORIZONTAL, \"%.f\", id(s_default_brightness).state);"         
      - "it.rectangle(223, 132 , 46 , 26 , light_blue);"
      - !? '"it.printf(175, 128, id(icon_font_35), lime, TextAlign::LEFT, \"" + $_.icon_glyphs.up + "\");"'    

  - id: ext_media_toggle
    x: 280
    y: 50
    w: 40
    h: 30
    on_click:
      - switch.toggle: output_audio
      - component.update: s3_box_lcd
    draw:
      - "it.printf(15, 55, id(my_font22), light_blue, \"Ext media player\");" 
      - "if(id(output_audio).state) {"
      - !? '"  it.printf(255, 35, id(icon_font_60), lime, \"" + $_.icon_glyphs.toggle_on + "\");"'
      - "} else {"   
      - !? '"  it.printf(255, 35, id(icon_font_60), blue_drk, \"" + $_.icon_glyphs.toggle_off + "\");"'
      - "}"

  - id: brightness_auto_toggle
    x: 280
    y: 90
    w: 40
    h: 30
    on_click:
      - switch.toggle: brightness_auto
      - component.update: s3_box_lcd
    draw:
      - "it.printf(15, 95, id(my_font22), light_blue, \"Brightness Auto\");"
      - "if(id(brightness_auto).state) {"
      - !? '"  it.printf(255, 75, id(icon_font_60), lime, \"" + $_.icon_glyphs.toggle_on + "\");"'
      - "} else {"   
      - !? '"  it.printf(255, 75, id(icon_font_60), blue_drk, \"" + $_.icon_glyphs.toggle_off + "\");"'
      - "}"

  - id: chang_display_format
    x: 200
    y: 175
    w: 60
    h: 35
    on_click:
      - select.operation:
            id: time_format
            operation: Next
            cycle: true   
      - component.update: s3_box_lcd      
    draw:       
      - "it.printf(65, 180, id(my_font22), light_blue, \"Time Format:\");"
      - "it.printf(210, 180, id(my_font22), lime, \"%s\", id(time_display_format).state.c_str());"

touch_pages: !-
  - id: idle_page
    buttons: 
      - status_bar_title
      - status_bar_mute_switch
      - status_bar_api_connection
      - status_bar_wifi_connection
      #- status_bar_settings_button
      #- temp_sensor_button 
      #- light_on_button
      #- fan_button
      - music_button
      - light_control_button
      - current_time
      - weather_current_condition

  - id: info_page
    buttons: 
      - status_bar_title
      - status_bar_mute_switch
      - status_bar_api_connection
      - status_bar_wifi_connection
      #- status_bar_settings_button
      - device_info

  # - id: lights_page
  #   buttons: 
  #     - status_bar_title
  #     - status_bar_mute_switch
  #     - status_bar_api_connection
  #     - status_bar_wifi_connection
  #     - status_bar_settings_button

  - id: template_page
    buttons: 
      - status_bar_title
      - status_bar_mute_switch
      - status_bar_api_connection
      - status_bar_wifi_connection
      #- status_bar_settings_button

  # - id: media_page
  #   buttons: 
  #     - status_bar_title
  #     - status_bar_mute_switch
  #     - status_bar_api_connection
  #     - status_bar_wifi_connection
  #     - status_bar_settings_button

  # - id: ext_media_page
  #   buttons: 
  #     - status_bar_title
  #     - status_bar_mute_switch
  #     - status_bar_api_connection
  #     - status_bar_wifi_connection
  #     - status_bar_settings_button

  # - id: scenes_page
  #   buttons: 
  #     - status_bar_title
  #     - status_bar_mute_switch
  #     - status_bar_api_connection
  #     - status_bar_wifi_connection
  #     - status_bar_settings_button

  - id: settings_page
    buttons: 
      - status_bar_title
      - status_bar_mute_switch
      - status_bar_api_connection
      - status_bar_wifi_connection
      - voice_set
      - ss_set
      - info_set
      - device_set
      - voice_test
      - settings_info

  - id: wifi_page
    buttons:
      - status_bar_title
      - status_bar_mute_switch
      - status_bar_api_connection
      - status_bar_wifi_connection
      #- status_bar_settings_button
      - wifi_info

  - id: media_page
    buttons:
      - status_bar_title
      - status_bar_mute_switch
      - status_bar_api_connection
      - status_bar_wifi_connection
      #- status_bar_settings_button
      - media_page

  - id: ext_media_page
    buttons:
      - status_bar_title
      - status_bar_mute_switch
      - status_bar_api_connection
      - status_bar_wifi_connection
      #- status_bar_settings_button
      - ext_media_page

  - id: device_set_page 
    buttons:
      - status_bar_title
      - status_bar_mute_switch
      - status_bar_api_connection
      - status_bar_wifi_connection
      #- status_bar_settings_button
      - device_set_back
      - s_default_bright_down
      - s_default_bright_up
      - ext_media_toggle
      - brightness_auto_toggle
      - chang_display_format
      
rendered_pages: !-
  - !? |
    $_.touch_pages.join( 
      $_.buttons, $1.buttons.any($ = $2.id), 
      [dict(id => $1.id, draw => $2.draw)]
    )
      .select($[0])
      .groupBy($.id)
      .map(
        dict(
          "id" => $[0], 
          "lambda" => $[1].draw.aggregate($1.concat($2), []).join('\n')
          )
      )

static_pages: !-
  - id: ss_set_page ##### screen saver settings page #####
    lambda: |-
      it.fill(id(black));
      it.printf(160, 70, id(icon_font_75), light_blue, TextAlign::CENTER, "\U000F08D6");  
      it.printf(160, 20, id(my_font22), light_blue, TextAlign::CENTER, "Screensaver Settings");
      it.printf(250, 115, id(my_font22), light_blue, TextAlign::RIGHT, "Timeout Settings :");
      it.printf(255, 95, id(icon_font_35), lime, "\U000F08D6");
      it.printf(250, 145, id(my_font22), light_blue, TextAlign::RIGHT, "Enable screensaver :");
      if(id(s_saver).state) {
              it.printf(255, 135, id(icon_font_35), lime, "\U000F0521");
      } else {   
              it.printf(255, 135, id(icon_font_35), blue_drk, "\U000F0A19");
      } 
      it.printf(250, 205, id(my_font22), light_blue, TextAlign::RIGHT, "Timeout to blank :");          
      if(id(s_saver_mode).state) {
              it.printf(255, 195, id(icon_font_35), lime, "\U000F0521");
      } else {   
              it.printf(255, 195, id(icon_font_35), blue_drk, "\U000F0A19");
      }         
      
  - id: ww_set_page ##### voice settings page #####
    lambda: |-
      it.fill(id(black));
      it.printf(160, 50, id(icon_font_35), light_blue, TextAlign::CENTER, "\U000F08D6");  
      it.printf(160, 20, id(my_font22), light_blue, TextAlign::CENTER, "Voice Settings");
      it.printf(155, 85, id(my_font22), light_blue, TextAlign::CENTER, "tap to change");
      it.printf(135, 115, id(my_font22), light_blue, TextAlign::RIGHT, "WakeWord :");
      it.printf(310, 115, id(my_font22), lime, TextAlign::RIGHT, "%s", id(wakeword_location).state.c_str());
      it.printf(250, 145, id(my_font22), light_blue, TextAlign::RIGHT, "Mute responses :"); 
      if(id(mute_response_switch).state) {
              it.printf(255, 135, id(icon_font_35), lime, "\U000F0521");
      } else {   
              it.printf(255, 135, id(icon_font_35), blue_drk, "\U000F0A19");
      }          
      it.printf(250, 175, id(my_font22), light_blue, TextAlign::RIGHT, "Wake up sound :");          
      if(id(wake_sound).state) {
              it.printf(255, 165, id(icon_font_35), lime, "\U000F0521");
      } else {   
              it.printf(255, 165, id(icon_font_35), blue_drk, "\U000F0A19");
      } 
      it.printf(250, 205, id(my_font22), light_blue, TextAlign::RIGHT, "Show Conversation :");          
      if(id(display_conversation).state) {
              it.printf(255, 195, id(icon_font_35), lime, "\U000F0521");
      } else {   
              it.printf(255, 195, id(icon_font_35), blue_drk, "\U000F0A19");
      }           
      
  - id: climate_page ##### climate page #####
    lambda: |-
      it.fill(id(black));
      if(id(api_connection) == true) {
              it.printf(15, 5, id(icon_font_35), blue, "\U000F07D0");      
      } else {
              it.printf(15, 5, id(icon_font_35), red, "\U000F087B");
      }
      if(id(wifi_connection) == true) {
              it.printf(80, 5, id(icon_font_35), lime, "\U000F16BD");      
      } else {
              it.printf(80, 5, id(icon_font_35), red, "\U000F16BC");
      }
      if(id(time_remaining_0).state == "0:00:00"){
      it.printf(135, 5, id(icon_font_35), red, "\U000F0150");
      } else {
      it.printf(135, 5, id(icon_font_35), lime, "\U000F0150");
      }
      if(id(mute_switch).state) {
              it.printf(190, 5, id(icon_font_35), red, "\U000F036D"); 
      } else {
              it.printf(190, 5, id(icon_font_35), lime, "\U000F036C"); 
      }
      if(id(alarm_status).state == "disarmed") {
      it.printf(250, 5, id(icon_font_35), red, "\U000F099E"); 
      } else if(id(alarm_status).state == "arming") {
      it.printf(250, 5, id(icon_font_35), amber, "\U000F0565"); 
      } else if(id(alarm_status).state == "armed_home") {
      it.printf(250, 5, id(icon_font_35), green, "\U000F068A");
      } else if(id(alarm_status).state == "armed_away") {
      it.printf(250, 5, id(icon_font_35), green, "\U000F099D");     
      } else if(id(alarm_status).state == "armed_night") {
      it.printf(250, 5, id(icon_font_35), green, "\U000F1828");
      }  
      it.printf(20, 75, id(icon_font_75), light_blue,"\U000F050F");
      it.printf(120, 75, id(icon_font_75), light_blue,"\U000F050F");
      it.printf(220, 75, id(icon_font_75), light_blue, "\U000F050F");
      it.printf(20, 155, id(icon_font_75), light_blue,"\U000F050F");
      it.printf(120, 155, id(icon_font_75), light_blue,"\U000F050F");
      it.printf(220, 155, id(icon_font_75), light_blue, "\U000F050F");

  - id: lights_page ##### lights page ####
    lambda: |-
      it.fill(id(black));
      if(id(api_connection) == true) {
              it.printf(15, 5, id(icon_font_35), blue, "\U000F07D0");      
      } else {
              it.printf(15, 5, id(icon_font_35), red, "\U000F087B");
      }
      if(id(wifi_connection) == true) {
              it.printf(80, 5, id(icon_font_35), lime, "\U000F16BD");      
      } else {
              it.printf(80, 5, id(icon_font_35), red, "\U000F16BC");
      }
      if(id(time_remaining_0).state == "0:00:00"){
      it.printf(135, 5, id(icon_font_35), red, "\U000F0150");
      } else {
      it.printf(135, 5, id(icon_font_35), lime, "\U000F0150");
      }
      if(id(mute_switch).state) {
              it.printf(190, 5, id(icon_font_35), red, "\U000F036D"); 
      } else {
              it.printf(190, 5, id(icon_font_35), lime, "\U000F036C"); 
      }
      if(id(alarm_status).state == "disarmed") {
      it.printf(250, 5, id(icon_font_35), red, "\U000F099E"); 
      } else if(id(alarm_status).state == "arming") {
      it.printf(250, 5, id(icon_font_35), amber, "\U000F0565"); 
      } else if(id(alarm_status).state == "armed_home") {
      it.printf(250, 5, id(icon_font_35), green, "\U000F068A");
      } else if(id(alarm_status).state == "armed_away") {
      it.printf(250, 5, id(icon_font_35), green, "\U000F099D");     
      } else if(id(alarm_status).state == "armed_night") {
      it.printf(250, 5, id(icon_font_35), green, "\U000F1828");
      }  
      it.printf(20, 75, id(icon_font_75), light_blue,"\U000F0335");
      it.printf(120, 75, id(icon_font_75), light_blue,"\U000F0335");
      it.printf(220, 75, id(icon_font_75), light_blue, "\U000F0335");
      it.printf(20, 155, id(icon_font_75), light_blue,"\U000F0335");
      it.printf(120, 155, id(icon_font_75), light_blue,"\U000F0335");
      it.printf(220, 155, id(icon_font_75), light_blue, "\U000F0335");


      
  - id: scenes_page ##### scenes page #####
    lambda: |-
      it.fill(id(black));
      if(id(api_connection) == true) {
              it.printf(15, 5, id(icon_font_35), blue, "\U000F07D0");      
      } else {
              it.printf(15, 5, id(icon_font_35), red, "\U000F087B");
      }
      if(id(wifi_connection) == true) {
              it.printf(80, 5, id(icon_font_35), lime, "\U000F16BD");      
      } else {
              it.printf(80, 5, id(icon_font_35), red, "\U000F16BC");
      }
      if(id(time_remaining_0).state == "0:00:00"){
      it.printf(135, 5, id(icon_font_35), red, "\U000F0150");
      } else {
      it.printf(135, 5, id(icon_font_35), lime, "\U000F0150");
      }
      if(id(mute_switch).state) {
              it.printf(190, 5, id(icon_font_35), red, "\U000F036D"); 
      } else {
              it.printf(190, 5, id(icon_font_35), lime, "\U000F036C"); 
      }
      if(id(alarm_status).state == "disarmed") {
      it.printf(250, 5, id(icon_font_35), red, "\U000F099E"); 
      } else if(id(alarm_status).state == "arming") {
      it.printf(250, 5, id(icon_font_35), amber, "\U000F0565"); 
      } else if(id(alarm_status).state == "armed_home") {
      it.printf(250, 5, id(icon_font_35), green, "\U000F068A");
      } else if(id(alarm_status).state == "armed_away") {
      it.printf(250, 5, id(icon_font_35), green, "\U000F099D");     
      } else if(id(alarm_status).state == "armed_night") {
      it.printf(250, 5, id(icon_font_35), green, "\U000F1828");
      }    
      it.printf(20, 75, id(icon_font_75), light_blue,"\U000F0FCE");
      it.printf(120, 75, id(icon_font_75), light_blue,"\U000F0FCE");
      it.printf(220, 75, id(icon_font_75), light_blue, "\U000F0FCE");
      it.printf(20, 155, id(icon_font_75), light_blue,"\U000F0FCE");
      it.printf(120, 155, id(icon_font_75), light_blue,"\U000F0FCE");
      it.printf(220, 155, id(icon_font_75), light_blue, "\U000F0FCE");


  - id: loading_page ### loading page #####
    lambda: |-
      it.fill(Color::BLACK);
      it.image((it.get_width() / 2), (it.get_height() / 2), id(loading_img), ImageAlign::CENTER);

  - id: listening_page
    lambda: |-
      it.fill(Color::BLACK);
      it.image((it.get_width() / 2), (it.get_height() / 2), id(listening_img), ImageAlign::CENTER);
  
  - id: thinking_page
    lambda: |-
      it.fill(Color::BLACK);
      it.image((it.get_width() / 2), (it.get_height() / 2), id(thinking_img), ImageAlign::CENTER);
      if (id(display_conversation).state) {
        it.filled_rectangle(0 , 0 , 320 , 30 , Color::WHITE );
        it.printf(10, 10, id(my_font16), Color::BLACK, "%s", id(text_request).state.c_str());
      }          
  - id: replying_page
    lambda: |-
      it.fill(Color::BLACK);
      it.image((it.get_width() / 2), (it.get_height() / 2), id(replying_img), ImageAlign::CENTER);
      if (id(display_conversation).state) {
        it.filled_rectangle(0 , 0 , 320 , 30 , Color::WHITE );
        it.filled_rectangle(0 , 210 , 320 , 30 , Color::WHITE );
        it.printf(10, 10, id(my_font16), Color::BLACK, "%s", id(text_request).state.c_str());
        it.printf(10, 220, id(my_font16), Color::BLACK, "%s", id(text_response).state.c_str());
      }
  - id: error_page
    lambda: |-
      it.fill(Color::BLACK);
      it.image((it.get_width() / 2), (it.get_height() / 2), id(error_img), ImageAlign::CENTER);
      
  - id: timer_finished_page
    lambda: |-
      it.fill(id(black));
      it.printf(160, 20, id(my_font22), light_blue, TextAlign::CENTER, "Timer Finished");
      it.printf(160, 120, id(icon_font_180), light_blue, TextAlign::CENTER, "\U000F009E");
      it.printf(160, 215, id(my_font22), light_blue, TextAlign::CENTER, "tap screen to dismiss");

  - id: muted_page
    lambda: |-
      it.fill(Color::BLACK);
      it.printf(160, 120, id(my_font40), yellow, TextAlign::CENTER, "Mic & Speaker - Muted");

  - id: saver_page ##### screen saver display page #####
    lambda: |-
      it.fill(id(black));
        
      const char *days[] {"${sunday}","${monday}","${tuesday}","${wednesday}","${thursday}","${friday}","${saturday}"};
      const char *months[] {"${jan}","${feb}","${mar}","${apr}","${may}","${jun}","${jul}","${aug}","${sept}","${oct}","${nov}","${dec}"};
      it.printf(160, 28, id(my_font22), light_blue, TextAlign::CENTER, "%s %d %s", days[id(ha_time).now().day_of_week - 1], id(ha_time).now().day_of_month, months[id(ha_time).now().month - 1]);
      if(id(time_display_format).state != "12 Hr") {
        it.strftime(160, 88, id(my_font82), TextAlign::CENTER, "%H:%M", id(ha_time).now());
      } else {
        it.strftime(160, 88, id(my_font72), TextAlign::CENTER, "%l:%M%p", id(ha_time).now());
      }
      
  - id: ota_page ##### firmware uploading page #####
    lambda: |-
      it.fill(Color::BLACK);
      it.printf(160, 60, id(icon_font_75), red, TextAlign::CENTER, "\U000F08D6");  
      it.printf((it.get_width() / 2), (it.get_height() / 2), id(my_font28), red, TextAlign::CENTER, "FIRMWARE UPDATING");
      it.printf(160,190, id(my_font28), red, TextAlign::CENTER, "won't be long....");

  - id: timeout_settings_page ##### Timeout Settings page #####
    lambda: |-
      it.fill(id(black));
      //it.printf(160, 50, id(icon_font_35), light_blue, TextAlign::CENTER, "\U000F0150"); 
      it.printf(160, 20, id(my_font22), light_blue, TextAlign::CENTER, "Screen Settings");  
      it.printf(160, 60, id(my_font22), light_blue, TextAlign::CENTER, "Screen Saver"); 
      it.printf(50, 80, id(my_font14), light_blue, "Delay secs");
      it.printf(185, 80, id(my_font14), light_blue, "Dim Brightness");
      it.printf(105, 100, id(icon_font_35), lime, TextAlign::LEFT, "\U000F0B2C");    
      it.printf(65, 100, id(icon_font_35), lime, TextAlign::RIGHT, "\U000F0B26");          
      it.rectangle(65 , 105 , 40 , 40 , lime);
      it.printf(85, 125, id(my_font22), light_blue, TextAlign::CENTER, "%.f", id(s_saver_delay).state);
      it.printf(20, 160, id(my_font14), light_blue, "Screen off delay"); 
      it.printf(105, 180, id(icon_font_35), lime, TextAlign::LEFT, "\U000F0B2C");    
      it.printf(65, 180, id(icon_font_35), lime, TextAlign::RIGHT, "\U000F0B26");          
      it.rectangle(65 , 180 , 40 , 40 , lime);
      it.printf(85, 200, id(my_font22), light_blue, TextAlign::CENTER, "%.f", id(s_saver_blank_delay).state);
      it.printf(255, 100, id(icon_font_35), pink, TextAlign::LEFT, "\U000F0B2C");    
      it.printf(215, 100, id(icon_font_35), pink, TextAlign::RIGHT, "\U000F0B26");          
      it.rectangle(215 , 105 , 40 , 40 , pink);
      it.printf(235, 125, id(my_font22), light_blue, TextAlign::CENTER, "%.f", id(s_saver_brightness).state);

  - id: time_remaining_page ##### timer countdown page #####
    lambda: |-
      it.fill(id(black));
      it.printf(160, 20, id(my_font22), light_blue, TextAlign::CENTER, "Active Timers");
      it.printf(160, 70, id(icon_font_75), light_blue, TextAlign::CENTER, "\U000F0150"); 
      it.printf(160, 155, id(my_font50), light_blue, TextAlign::CENTER, "%s", id(time_remaining_0).state.c_str()); 
      

  - id: alarm_page   #### alarm page #####
    lambda: |-
      if(id(alarm_status).state == "disarmed") {
      it.printf(10, 10, id(icon_font_180), red, "\U000F099E");
      it.printf(40, 200, id(my_font28), red, "Disarmed");
      } else if(id(alarm_status).state == "arming") {
      it.printf(10, 10, id(icon_font_180), amber, "\U000F0565");
      it.printf(40, 200, id(my_font28), amber, "Arming");
      } else if(id(alarm_status).state == "armed_home") {
      it.printf(10, 10, id(icon_font_180), green, "\U000F068A");
      it.printf(60, 200, id(my_font28), green, "Armed");
      } else if(id(alarm_status).state == "armed_away") {
      it.printf(10, 10, id(icon_font_180), green, "\U000F099D");
      it.printf(60, 200, id(my_font28), green, "Armed");
      } else if(id(alarm_status).state == "armed_night") {
      it.printf(10, 10, id(icon_font_180), green, "\U000F1828");
      it.printf(60, 200, id(my_font28), green, "Armed");
      }
      if(id(alarm_status).state == "armed_home") {
      it.printf(225, 5, id(icon_font_60), green, "\U000F068A");
      it.printf(233, 60, id(my_font18), light_blue, "Home");
      } else {
      it.printf(225, 5, id(icon_font_60), blue_drk, "\U000F068A");
      it.printf(233, 60, id(my_font18), light_blue, "Home");
      }
      if(id(alarm_status).state == "armed_away") {
      it.printf(225, 80, id(icon_font_60), green, "\U000F099D");
      it.printf(233, 135, id(my_font18), light_blue, "Away");
      } else {          
      it.printf(225, 80, id(icon_font_60), blue_drk, "\U000F099D");
      it.printf(233, 135, id(my_font18), light_blue, "Away");
      }
      if(id(alarm_status).state == "armed_night") {
      it.printf(225, 155, id(icon_font_60), green, "\U000F1828");         
      it.printf(228, 215, id(my_font18), light_blue, "Night");
      } else {
      it.printf(225, 155, id(icon_font_60), blue_drk, "\U000F1828");         
      it.printf(228, 215, id(my_font18), light_blue, "Night");
      }
  - id: alarm_home_activate_page ##### alarm  home activation page #####
    lambda: |-
      auto pin_state = id(current_pin).c_str();
      it.print(310, 80, id(my_font28), TextAlign::RIGHT, pin_state);
      // loop for numbers 1 - 9
      for (int i = 0; i < 3; i++) {
      for (int j = 0; j < 3; j++) {
      int number = i * 3 + j + 1;
      int x_position = 15 + j * 56;  // Ajustement de la position en X
      int y_position = 15 + i * 56;  // Ajustement de la position en Y
      it.rectangle(x_position, y_position, 48, 48, light_blue);  // Taille du rectangle ajustée
      char num_str[2];
      snprintf(num_str, sizeof(num_str), "%d", number);
      it.print(x_position + 24, y_position + 24, id(my_font28), TextAlign::CENTER, num_str);  // Centrage du chiffre
      }
        }
      it.rectangle(71, 183, 48, 48, light_blue);  // Position et taille du rectangle ajustées
      it.print(95, 207, id(my_font28), TextAlign::CENTER, "0");  // Centrage du chiffre "0"
      //it.filled_rectangle(198, 110, 108, 50, green);
      if(id(alarm_status).state == "disarmed"){
      it.filled_rectangle(198, 110, 108, 50, red);
      it.print(255, 135, id(my_font28), white, TextAlign::CENTER, "Arm");
      } else if(id(alarm_status).state == "armed_home"){
      it.filled_rectangle(198, 110, 108, 50, green); 
      it.print(255, 135, id(my_font28), white, TextAlign::CENTER, "Disarm");
      }                 
      it.filled_rectangle(198, 170, 108, 50, blue_drk);
      it.print(255, 195, id(my_font28), white, TextAlign::CENTER, "Clear");
      if(id(alarm_status).state == "disarmed") {
      it.printf(255, 30, id(icon_font_35), red, TextAlign::CENTER, "\U000F068A");
      it.printf(255, 70, id(my_font28), red, TextAlign::CENTER, "Disarmed");
      } else if(id(alarm_status).state == "arming") {
      it.printf(255, 30, id(icon_font_35), amber, TextAlign::CENTER, "\U000F0565");
      it.printf(255, 70, id(my_font28), amber, TextAlign::CENTER, "Arming");
      } else if(id(alarm_status).state == "armed_home") {
      it.printf(255, 30, id(icon_font_35), green, TextAlign::CENTER, "\U000F068A");
      it.printf(255, 70, id(my_font28), green, TextAlign::CENTER, "Armed");
      }         
  - id: alarm_away_activate_page ##### alarm away activation page #####
    lambda: |-
      auto pin_state = id(current_pin).c_str();
      it.print(310, 80, id(my_font28), TextAlign::RIGHT, pin_state);
      // loop for numbers 1 - 9
      for (int i = 0; i < 3; i++) {
      for (int j = 0; j < 3; j++) {
      int number = i * 3 + j + 1;
      int x_position = 15 + j * 56;  // Ajustement de la position en X
      int y_position = 15 + i * 56;  // Ajustement de la position en Y
      it.rectangle(x_position, y_position, 48, 48, light_blue);  // Taille du rectangle ajustée
      char num_str[2];
      snprintf(num_str, sizeof(num_str), "%d", number);
      it.print(x_position + 24, y_position + 24, id(my_font28), TextAlign::CENTER, num_str);  // Centrage du chiffre
      }
        }
      it.rectangle(71, 183, 48, 48, light_blue);  // Position et taille du rectangle ajustées
      it.print(95, 207, id(my_font28), TextAlign::CENTER, "0");  // Centrage du chiffre "0"
      if(id(alarm_status).state == "disarmed"){
      it.filled_rectangle(198, 110, 108, 50, red);
      it.print(255, 135, id(my_font28), white, TextAlign::CENTER, "Arm");
      } else if(id(alarm_status).state == "armed_away"){
      it.filled_rectangle(198, 110, 108, 50, green); 
      it.print(255, 135, id(my_font28), white, TextAlign::CENTER, "Disarm");
      }
      it.filled_rectangle(198, 170, 108, 50, blue_drk);
      it.print(255, 195, id(my_font28), white, TextAlign::CENTER, "Clear");
      if(id(alarm_status).state == "disarmed") {
      it.printf(255, 30, id(icon_font_35), red, TextAlign::CENTER, "\U000F099D");
      it.printf(255, 70, id(my_font28), red, TextAlign::CENTER, "Disarmed");
      } else if(id(alarm_status).state == "arming") {
      it.printf(255, 30, id(icon_font_35), amber, TextAlign::CENTER, "\U000F0565");
      it.printf(255, 70, id(my_font28), amber, TextAlign::CENTER, "Arming");
      } else if(id(alarm_status).state == "armed_away") {
      it.printf(255, 30, id(icon_font_35), green, TextAlign::CENTER, "\U000F099D");
      it.printf(255, 70, id(my_font28), green, TextAlign::CENTER, "Armed");
      }  
  - id: alarm_night_activate_page ##### alarm night activation page #####
    lambda: |-
      auto pin_state = id(current_pin).c_str();
      it.print(310, 80, id(my_font28), TextAlign::RIGHT, pin_state);
      // loop for numbers 1 - 9
      for (int i = 0; i < 3; i++) {
      for (int j = 0; j < 3; j++) {
      int number = i * 3 + j + 1;
      int x_position = 15 + j * 56;  // Ajustement de la position en X
      int y_position = 15 + i * 56;  // Ajustement de la position en Y
      it.rectangle(x_position, y_position, 48, 48, light_blue);  // Taille du rectangle ajustée
      char num_str[2];
      snprintf(num_str, sizeof(num_str), "%d", number);
      it.print(x_position + 24, y_position + 24, id(my_font28), TextAlign::CENTER, num_str);  // Centrage du chiffre
      }
        }
      it.rectangle(71, 183, 48, 48, light_blue);  // Position et taille du rectangle ajustées
      it.print(95, 207, id(my_font28), TextAlign::CENTER, "0");  // Centrage du chiffre "0"
      if(id(alarm_status).state == "disarmed"){
      it.filled_rectangle(198, 110, 108, 50, red);
      it.print(255, 135, id(my_font28), white, TextAlign::CENTER, "Arm");
      } else if(id(alarm_status).state == "armed_night"){
      it.filled_rectangle(198, 110, 108, 50, green); 
      it.print(255, 135, id(my_font28), white, TextAlign::CENTER, "Disarm");
      }
      it.filled_rectangle(198, 170, 108, 50, blue_drk);
      it.print(255, 195, id(my_font28), white, TextAlign::CENTER, "Clear");
      if(id(alarm_status).state == "disarmed") {
      it.printf(255, 30, id(icon_font_35), red, TextAlign::CENTER, "\U000F1828");
      it.printf(255, 70, id(my_font28), red, TextAlign::CENTER, "Disarmed");
      } else if(id(alarm_status).state == "arming") {
      it.printf(255, 30, id(icon_font_35), amber, TextAlign::CENTER, "\U000F0565");
      it.printf(255, 70, id(my_font28), amber, TextAlign::CENTER, "Arming");
      } else if(id(alarm_status).state == "armed_night") {
      it.printf(255, 30, id(icon_font_35), green, TextAlign::CENTER, "\U000F1828");
      it.printf(255, 70, id(my_font28), green, TextAlign::CENTER, "Armed");
      }            


static_buttons:
#### climate page #####
  - platform: touchscreen
    page_id: climate_page
    id: climate1
    internal: true
    x_min: 5
    x_max: 105
    y_min: 90
    y_max: 170
          #### make sure that the following 4 lines are uncommented by removing the prefixed '#' ###
    # on_click:
      # min_length: 10ms
      # max_length: 500ms
      # then: 

      #### add your action here - make sure to uncomment the following  line by removing the prefixed '#' and keep these below your action #####      
        
        # - component.update: s3_box_lcd

  - platform: touchscreen
    page_id: climate_page
    id: climate2
    internal: true
    x_min: 110
    x_max: 210
    y_min: 90
    y_max: 170
          #### make sure that the following 4 lines are uncommented by removing the prefixed '#' ###
    # on_click:
      # min_length: 10ms
      # max_length: 500ms
      # then: 
      #### add your action here - make sure to uncomment the following  line by removing the prefixed '#' and keep these below your action #####      
        
        # - component.update: s3_box_lcd 

  - platform: touchscreen
    page_id: climate_page
    id: climate3
    internal: true
    x_min: 215
    x_max: 315
    y_min: 90
    y_max: 170
          #### make sure that the following 4 lines are uncommented by removing the prefixed '#' ###
    # on_click:
      # min_length: 10ms
      # max_length: 500ms
      # then: 
      #### add your action here - make sure to uncomment the following  line by removing the prefixed '#' and keep these below your action #####      
        
        # - component.update: s3_box_lcd

  - platform: touchscreen
    page_id: climate_page
    id: climate4
    internal: true
    x_min: 5
    x_max: 105
    y_min: 175
    y_max: 240
          #### make sure that the following 4 lines are uncommented by removing the prefixed '#' ###
    # on_click:
      # min_length: 10ms
      # max_length: 500ms
      # then: 
      #### add your action here - make sure to uncomment the following  line by removing the prefixed '#' and keep these below your action #####      
        
        # - component.update: s3_box_lcd

  - platform: touchscreen
    page_id: climate_page
    id: climate5
    internal: true
    x_min: 110
    x_max: 210
    y_min: 175
    y_max: 240
          #### make sure that the following 4 lines are uncommented by removing the prefixed '#' ###
    # on_click:
      # min_length: 10ms
      # max_length: 500ms
      # then: 
      #### add your action here - make sure to uncomment the following  line by removing the prefixed '#' and keep these below your action #####      
        
        # - component.update: s3_box_lcd

  - platform: touchscreen
    page_id: climate_page
    id: climate6
    internal: true
    x_min: 215
    x_max: 315
    y_min: 175
    y_max: 240
          #### make sure that the following 4 lines are uncommented by removing the prefixed '#' ###
    # on_click:
      # min_length: 10ms
      # max_length: 500ms
      # then: 
      #### add your action here - make sure to uncomment the following  line by removing the prefixed '#' and keep these below your action #####      
        
        # - component.update: s3_box_lcd
##### lights page #####  
  - platform: touchscreen
    page_id: lights_page
    id: lights1
    internal: true
    x_min: 5
    x_max: 105
    y_min: 90
    y_max: 170
          #### make sure that the following 4 lines are uncommented by removing the prefixed '#' ###
    # on_click:
      # min_length: 10ms
      # max_length: 500ms
      # then: 
      #### add your action here - make sure to uncomment the following  line by removing the prefixed '#' and keep these below your action #####      
        
        # - component.update: s3_box_lcd

  - platform: touchscreen
    page_id: lights_page
    id: lights2
    internal: true
    x_min: 110
    x_max: 210
    y_min: 90
    y_max: 170
          #### make sure that the following 4 lines are uncommented by removing the prefixed '#' ###
    # on_click:
      # min_length: 10ms
      # max_length: 500ms
      # then: 
      #### add your action here - make sure to uncomment the following  line by removing the prefixed '#' and keep these below your action #####      
        
        # - component.update: s3_box_lcd

  - platform: touchscreen
    page_id: lights_page
    id: lights3
    internal: true
    x_min: 215
    x_max: 315
    y_min: 90
    y_max: 170
          #### make sure that the following 4 lines are uncommented by removing the prefixed '#' ###
    # on_click:
      # min_length: 10ms
      # max_length: 500ms
      # then: 
      #### add your action here - make sure to uncomment the following  line by removing the prefixed '#' and keep these below your action #####      
        
        # - component.update: s3_box_lcd

  - platform: touchscreen
    page_id: lights_page
    id: lights4
    internal: true
    x_min: 5
    x_max: 105
    y_min: 175
    y_max: 240
          #### make sure that the following 4 lines are uncommented by removing the prefixed '#' ###
    # on_click:
      # min_length: 10ms
      # max_length: 500ms
      # then: 
      #### add your action here - make sure to uncomment the following  line by removing the prefixed '#' and keep these below your action #####      
        
        # - component.update: s3_box_lcd

  - platform: touchscreen
    page_id: lights_page
    id: lights5
    internal: true
    x_min: 110
    x_max: 210
    y_min: 175
    y_max: 240
          #### make sure that the following 4 lines are uncommented by removing the prefixed '#' ###
    # on_click:
      # min_length: 10ms
      # max_length: 500ms
      # then: 
      #### add your action here - make sure to uncomment the following  line by removing the prefixed '#' and keep these below your action #####      
        
        # - component.update: s3_box_lcd

  - platform: touchscreen
    page_id: lights_page
    id: lights6
    internal: true
    x_min: 215
    x_max: 315
    y_min: 175
    y_max: 240
          #### make sure that the following 4 lines are uncommented by removing the prefixed '#' ###
    # on_click:
      # min_length: 10ms
      # max_length: 500ms
      # then: 
      #### add your action here - make sure to uncomment the following  line by removing the prefixed '#' and keep these below your action #####      
        
        # - component.update: s3_box_lcd

##### media player #####
  - platform: touchscreen
    page_id: media_page
    name: Volume Minus
    internal: true
    x_min: 5
    x_max: 105
    y_min: 90
    y_max: 170
    on_click:
      min_length: 0ms
      max_length: 500ms
      then:
        - logger.log: "Volume Minus pressed"
        - lambda: |-
            if (id(speaker_volume) > 0) {
              id(speaker_volume) -= 1;
            }
        - component.update: s3_box_lcd
        - script.execute: set_volume

  - platform: touchscreen
    page_id: media_page
    name: Volume Plus
    internal: true
    x_min: 215
    x_max: 315
    y_min: 90
    y_max: 170
    on_click:
      min_length: 0ms
      max_length: 500ms
      then:
        - logger.log: "Volume Plus pressed"
        - lambda: |-
            if (id(speaker_volume) < 10) {
              id(speaker_volume) += 1;
            }
        - component.update: s3_box_lcd
        - script.execute: set_volume

  - platform: touchscreen
    page_id: media_page
    name: Play Pause
    internal: true
    x_min: 110
    x_max: 210
    y_min: 90
    y_max: 170
    on_click:
      min_length: 0ms
      max_length: 500ms
      then:
        - if:
            condition:
              media_player.is_idle
            then:
              - media_player.play
            else:
              - media_player.stop
        - logger.log: "Play Paused pressed"
        
  - platform: touchscreen
    page_id: media_page
    name: Mute Media
    internal: true
    x_min: 110
    x_max: 210
    y_min: 180
    y_max: 260
    on_click:
      min_length: 0ms
      max_length: 500ms
      then:
        - switch.toggle: media_mute
        - component.update: s3_box_lcd
#### external media ####        
  - platform: touchscreen
    page_id: ext_media_page
    id: ext_prev_track
    internal: true
    x_min: 5
    x_max: 105
    y_min: 90
    y_max: 170
    on_click:
      min_length: 0ms
      max_length: 500ms
      then:
        - homeassistant.service:
            service: media_player.media_previous_track
            data:
              entity_id: media_player.${external_media_player}
        - component.update: s3_box_lcd

        
  - platform: touchscreen
    page_id: ext_media_page
    id: ext_next_track
    internal: true
    x_min: 215
    x_max: 315
    y_min: 90
    y_max: 170
    on_click:
      min_length: 0ms
      max_length: 500ms
      then:
        - homeassistant.service:
            service: media_player.media_next_track
            data:
              entity_id: media_player.${external_media_player}
        - component.update: s3_box_lcd


  - platform: touchscreen
    page_id: ext_media_page
    name: Play Pause
    internal: true
    x_min: 110
    x_max: 210
    y_min: 90
    y_max: 170
    on_click:
      min_length: 0ms
      max_length: 500ms
      then:
        - homeassistant.service:
            service: media_player.media_pause
            data:
              entity_id: media_player.${external_media_player}
        - component.update: s3_box_lcd

        
  - platform: touchscreen
    page_id: ext_media_page
    name: Mute Media
    internal: true
    x_min: 110
    x_max: 210
    y_min: 180
    y_max: 260
    on_click:
      min_length: 0ms
      max_length: 500ms
      then:
        - switch.toggle: ext_media_mute
        - component.update: s3_box_lcd
        
  - platform: touchscreen
    page_id: ext_media_page
    id: vol_minus
    internal: true
    x_min: 5
    x_max: 105
    y_min: 180
    y_max: 260
    on_click:
      min_length: 0ms
      max_length: 500ms
      then:
        - homeassistant.service:
            service: media_player.volume_down
            data:
              entity_id: media_player.${external_media_player}
        - component.update: s3_box_lcd
        - script.execute: set_volume

  - platform: touchscreen
    page_id: ext_media_page
    id: vol_plus
    internal: true
    x_min: 215
    x_max: 315
    y_min: 180
    y_max: 260
    on_click:
      min_length: 0ms
      max_length: 500ms
      then:
        - homeassistant.service:
            service: media_player.volume_up
            data:
              entity_id: media_player.${external_media_player}
        - component.update: s3_box_lcd
        - script.execute: set_volume

##### scenes page ####
  - platform: touchscreen
    page_id: scenes_page
    id: scenes1
    internal: true
    x_min: 5
    x_max: 105
    y_min: 90
    y_max: 170
          #### make sure that the following 4 lines are uncommented by removing the prefixed '#' ###
    # on_click:
      # min_length: 10ms
      # max_length: 500ms
      # then: 
      #### add your action here - make sure to uncomment the following  line by removing the prefixed '#' and keep these below your action #####      
        
        # - component.update: s3_box_lcd

  - platform: touchscreen
    page_id: scenes_page
    id: scenes2
    internal: true
    x_min: 110
    x_max: 210
    y_min: 90
    y_max: 170
    # on_click:
    #   min_length: 10ms
    #   max_length: 500ms
    
        #### make sure that the following  line are uncommented and sit at the bottom of this block after your action ###
            
            # - component.update: s3_box_lcd


  - platform: touchscreen
    page_id: scenes_page
    id: scenes3
    internal: true
    x_min: 215
    x_max: 315
    y_min: 90
    y_max: 170
    # on_click:
    #   min_length: 10ms
    #   max_length: 500ms
    
        #### make sure that the following  line are uncommented and sit at the bottom of this block after your action ###
            
            # - component.update: s3_box_lcd

  - platform: touchscreen
    page_id: scenes_page
    id: scenes4
    internal: true
    x_min: 5
    x_max: 105
    y_min: 175
    y_max: 240
    # on_click:
    #   min_length: 10ms
    #   max_length: 500ms
    
        #### make sure that the following  line are uncommented and sit at the bottom of this block after your action ###
            
            # - component.update: s3_box_lcd


  - platform: touchscreen
    page_id: scenes_page
    id: scenes5
    internal: true
    x_min: 110
    x_max: 210
    y_min: 175
    y_max: 240
    # on_click:
    #   min_length: 10ms
    #   max_length: 500ms
    
        #### make sure that the following  line are uncommented and sit at the bottom of this block after your action ###
            
            # - component.update: s3_box_lcd



  - platform: touchscreen
    page_id: scenes_page
    id: scenes6
    internal: true
    x_min: 215
    x_max: 315
    y_min: 175
    y_max: 240
    # on_click:
    #   min_length: 10ms
    #   max_length: 500ms
    
        #### make sure that the following  line are uncommented and sit at the bottom of this block after your action ###
            
            # - component.update: s3_box_lcd
            
##### Screensaver Settings #####            
  - platform: touchscreen
    page_id: ss_set_page
    id: ss_timeout
    internal: true
    x_min: 250
    x_max: 315
    y_min: 115
    y_max: 145
    on_click:
      min_length: 10ms
      max_length: 500ms
      then:
        - display.page.show: timeout_settings_page
        - component.update: s3_box_lcd
 
  - platform: touchscreen
    page_id: ss_set_page
    id: ss_toggle
    internal: true
    x_min: 250
    x_max: 315
    y_min: 150
    y_max: 175
    on_click:
      min_length: 10ms
      max_length: 500ms
      then:
        - switch.toggle: s_saver
        - component.update: s3_box_lcd
        
  - platform: touchscreen
    page_id: ss_set_page
    id: ss_toggle_blank
    internal: true
    x_min: 250
    x_max: 315
    y_min: 210
    y_max: 235
    on_click:
      min_length: 10ms
      max_length: 500ms
      then:
        - switch.toggle: s_saver_mode
        - component.update: s3_box_lcd   
        
##### voice settings page #####
  - platform: touchscreen
    page_id: ww_set_page
    id: ww_chang_hass
    internal: true
    x_min: 10
    x_max: 315
    y_min: 100
    y_max: 135
    on_click:
      min_length: 10ms
      max_length: 500ms
      then:
        - select.operation:
            id: wake_word_engine_location
            operation: Next
            cycle: true   
        - component.update: s3_box_lcd
       
  - platform: touchscreen
    page_id: ww_set_page
    id: mute_response
    internal: true
    x_min: 250
    x_max: 315
    y_min: 145
    y_max: 170
    on_click:
      min_length: 10ms
      max_length: 500ms
      then:
        - switch.toggle: mute_response_switch  
        - component.update: s3_box_lcd
       
  - platform: touchscreen
    page_id: ww_set_page
    id: ww_wake_sound
    internal: true
    x_min: 250
    x_max: 315
    y_min: 180
    y_max: 205
    on_click:
      min_length: 10ms
      max_length: 500ms
      then:
        - switch.toggle: wake_sound
        - component.update: s3_box_lcd
      
  - platform: touchscreen
    page_id: ww_set_page
    id: ww_toggle_conv
    internal: true
    x_min: 250
    x_max: 315
    y_min: 210
    y_max: 235
    on_click:
        - switch.toggle: display_conversation
        - component.update: s3_box_lcd
   
##### touch to wake screen #####
  - platform: touchscreen
    page_id: saver_page
    id: ss_wake
    internal: true
    x_min: 0
    x_max: 320
    y_min: 0
    y_max: 240
    on_click:
      min_length: 10ms
      max_length: 500ms
      then:
        - display.page.show: idle_page
        - component.update: s3_box_lcd
     
##### Timer finished page #####
  - platform: touchscreen
    page_id: timer_finished_page
    id: timer_dismiss
    internal: true
    x_min: 0
    x_max: 320
    y_min: 0
    y_max: 240
    on_click:
      min_length: 10ms
      max_length: 500ms
      then:
        - switch.turn_off: timer_ringing
        - display.page.show: idle_page
        - component.update: s3_box_lcd

##### Timeout settings buttons #####
  - id: ss_sleep_down
    page_id: timeout_settings_page
    platform: touchscreen
    internal: true
    x_min: 25
    x_max: 60
    y_min: 105
    y_max: 140
    on_press:
      then:
        - lambda: |-
            int sleep = id(s_saver_delay).state - 5;
            if (sleep < 1) {
              sleep = 1;
            }
            auto call = id(s_saver_delay).make_call();
            call.set_value(sleep);
            call.perform();
        - component.update: s3_box_lcd

  - id: ss_sleep_up
    page_id: timeout_settings_page
    platform: touchscreen
    internal: true
    x_min: 110
    x_max: 145
    y_min: 105
    y_max: 140
    on_press:
      then:
        - lambda: |-
            int sleep = id(s_saver_delay).state + 5;
            auto call = id(s_saver_delay).make_call();
            call.set_value(sleep);
            call.perform();
        - component.update: s3_box_lcd
        
  - id: ss_blank_down
    page_id: timeout_settings_page
    platform: touchscreen
    internal: true
    x_min: 25
    x_max: 60
    y_min: 180
    y_max: 220
    on_press:
      then:
        - lambda: |-
            int sleep = id(s_saver_blank_delay).state - 5;
            if (sleep < 1) {
              sleep = 1;
            }
            auto call = id(s_saver_blank_delay).make_call();
            call.set_value(sleep);
            call.perform();
        - component.update: s3_box_lcd

  - id: ss_blank_up
    page_id: timeout_settings_page
    platform: touchscreen
    internal: true
    x_min: 110
    x_max: 145
    y_min: 180
    y_max: 220
    on_press:
      then:
        - lambda: |-
            int sleep = id(s_saver_blank_delay).state + 5;
            auto call = id(s_saver_blank_delay).make_call();
            call.set_value(sleep);
            call.perform();
        - component.update: s3_box_lcd
                
        
  - id: ss_bright_down
    page_id: timeout_settings_page
    platform: touchscreen
    internal: true
    x_min: 165
    x_max: 195
    y_min: 105
    y_max: 140
    on_press:
      then:
        - lambda: |-
            int bright = id(s_saver_brightness).state - 5;
            if (bright < 1) {
              bright = 1;
            }
            auto call = id(s_saver_brightness).make_call();
            call.set_value(bright);
            call.perform();
        - component.update: s3_box_lcd

  - id: ss_bright_up
    page_id: timeout_settings_page
    platform: touchscreen
    internal: true
    x_min: 260
    x_max: 295
    y_min: 105
    y_max: 140
    on_press:
      then:
        - lambda: |-
            int bright = id(s_saver_brightness).state + 5;
            auto call = id(s_saver_brightness).make_call();
            call.set_value(bright);
            call.perform();
        - component.update: s3_box_lcd


          
##### alarm panel buttons #####
  - platform: touchscreen
    pages:
      - alarm_away_activate_page
      - alarm_home_activate_page
      - alarm_night_activate_page      
    id: alarm_key_1
    internal: true
    x_min: 15
    x_max: 63
    y_min: 15
    y_max: 63
    on_press:
      - script.execute: increment_digit_1
      - component.update: s3_box_lcd

  - platform: touchscreen
    pages:
      - alarm_away_activate_page
      - alarm_home_activate_page
      - alarm_night_activate_page 
    id: alarm_key_2
    internal: true
    x_min: 71
    x_max: 119
    y_min: 15
    y_max: 63
    on_press:
      - script.execute: increment_digit_2
      - component.update: s3_box_lcd

  - platform: touchscreen
    pages:
      - alarm_away_activate_page
      - alarm_home_activate_page
      - alarm_night_activate_page 
    id: alarm_key_3
    internal: true
    x_min: 127
    x_max: 175
    y_min: 15
    y_max: 63
    on_press:
      - script.execute: increment_digit_3
      - component.update: s3_box_lcd

  - platform: touchscreen
    pages:
      - alarm_away_activate_page
      - alarm_home_activate_page
      - alarm_night_activate_page 
    id: alarm_key_4
    internal: true
    x_min: 15
    x_max: 63
    y_min: 71
    y_max: 119
    on_press:
      - script.execute: increment_digit_4
      - component.update: s3_box_lcd

  - platform: touchscreen
    pages:
      - alarm_away_activate_page
      - alarm_home_activate_page
      - alarm_night_activate_page 
    id: alarm_key_5
    internal: true
    x_min: 71
    x_max: 119
    y_min: 71
    y_max: 119
    on_press:
      - script.execute: increment_digit_5
      - component.update: s3_box_lcd

  - platform: touchscreen
    pages:
      - alarm_away_activate_page
      - alarm_home_activate_page
      - alarm_night_activate_page 
    id: alarm_key_6
    internal: true
    x_min: 127
    x_max: 175
    y_min: 71
    y_max: 119
    on_press:
      - script.execute: increment_digit_6
      - component.update: s3_box_lcd

  - platform: touchscreen
    pages:
      - alarm_away_activate_page
      - alarm_home_activate_page
      - alarm_night_activate_page 
    id: alarm_key_7
    internal: true
    x_min: 15
    x_max: 63
    y_min: 127
    y_max: 175
    on_press:
      - script.execute: increment_digit_7
      - component.update: s3_box_lcd

  - platform: touchscreen
    pages:
      - alarm_away_activate_page
      - alarm_home_activate_page
      - alarm_night_activate_page 
    id: alarm_key_8
    internal: true
    x_min: 71
    x_max: 119
    y_min: 127
    y_max: 175
    on_press:
      - script.execute: increment_digit_8
      - component.update: s3_box_lcd

  - platform: touchscreen
    pages:
      - alarm_away_activate_page
      - alarm_home_activate_page
      - alarm_night_activate_page 
    id: alarm_key_9
    internal: true
    x_min: 127
    x_max: 175
    y_min: 127
    y_max: 175
    on_press:
      - script.execute: increment_digit_9
      - component.update: s3_box_lcd

  - platform: touchscreen
    pages:
      - alarm_away_activate_page
      - alarm_home_activate_page
      - alarm_night_activate_page 
    id: alarm_key_0
    internal: true
    x_min: 71
    x_max: 119
    y_min: 183
    y_max: 231
    on_press:   
      - media_player.play_media:
          media_url: '${home_assistant_host}/local/sounds/key.mp3'
      - script.execute: increment_digit_0 
      - component.update: s3_box_lcd     
           
  - platform: touchscreen
    pages:
      - alarm_away_activate_page
      - alarm_home_activate_page
      - alarm_night_activate_page 
    id: clear_pin
    x_min: 198
    x_max: 306
    y_min: 170
    y_max: 220
    on_press:
      then:
        - lambda: |-
            id(current_pin) = "";
        - component.update: s3_box_lcd
            
  - platform: touchscreen
    pages:
      - alarm_away_activate_page
      - alarm_home_activate_page
      - alarm_night_activate_page 
    id: alarm_ok
    x_min: 198
    x_max: 306
    y_min: 110
    y_max: 160
    on_click:
      min_length: 0ms
      max_length: 500ms
      then:
        - if:
            condition:
              - lambda: |-
                  return (id(alarm_status).state == "arming" || id(alarm_status).state == "armed_away" || id(alarm_status).state == "armed_home" || id(alarm_status).state == "armed_night");
            then:
              - homeassistant.service:
                  service: alarm_control_panel.alarm_disarm
                  data:
                    entity_id: alarm_control_panel.alarmo
                    code: !lambda return id(current_pin).c_str();
              - lambda: |-
                  id(current_pin) = "";
            else:
              - if:
                  condition:
                    and:
                      - lambda: |-
                          return (id(alarm_status).state == "disarmed");
                      - display.is_displaying_page: alarm_home_activate_page                         
                  then:
                    - homeassistant.service:
                        service: alarm_control_panel.alarm_arm_home
                        data:
                          entity_id: alarm_control_panel.alarmo
                          code: !lambda return id(current_pin).c_str();
                    - lambda: |-
                        id(current_pin) = "";  
                  else:
                    - if:
                        condition:
                          and:
                            - lambda: |-
                                return (id(alarm_status).state == "disarmed");
                                
                            - display.is_displaying_page: alarm_away_activate_page
                        then:
                          - homeassistant.service:
                              service: alarm_control_panel.alarm_arm_away
                              data:
                                entity_id: alarm_control_panel.alarmo
                                code: !lambda return id(current_pin).c_str();
                          - lambda: |-
                              id(current_pin) = "";     
                        
                        else:                        
                          - if:
                              condition:
                                and:
                                  - lambda: |-
                                      return (id(alarm_status).state == "disarmed");
                                  - display.is_displaying_page: alarm_night_activate_page
                              then:
                                - homeassistant.service:
                                    service: alarm_control_panel.alarm_arm_night
                                    data:
                                      entity_id: alarm_control_panel.alarmo
                                      code: !lambda return id(current_pin).c_str();
                                - lambda: |-
                                    id(current_pin) = ""; 
        - component.update: s3_box_lcd      
                                                           
  - platform: touchscreen
    page_id: alarm_page
    id: arm_disarm_home
    x_min: 215
    x_max: 320
    y_min: 5
    y_max: 75
    on_click:
      min_length: 0ms
      max_length: 500ms
      then:
        - display.page.show: alarm_home_activate_page
        - component.update: s3_box_lcd   
        
  - platform: touchscreen
    page_id: alarm_page
    id: arm_disarm_away
    x_min: 215
    x_max: 320
    y_min: 80
    y_max: 150
    on_click:
      min_length: 0ms
      max_length: 500ms
      then:
        - display.page.show: alarm_away_activate_page
        - component.update: s3_box_lcd   
        
  - platform: touchscreen
    page_id: alarm_page
    id: arm_disarm_night
    x_min: 215
    x_max: 320
    y_min: 155
    y_max: 240
    on_click:
      min_length: 0ms
      max_length: 500ms
      then:
        - display.page.show: alarm_night_activate_page
        - component.update: s3_box_lcd   
################## config end ############################
